from statistics import mean


class Mentor:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []


class Reviewer(Mentor):
    def rate_hw(self, student, course, grade: int):
        if isinstance(student, Student) and course in self.courses_attached and course in student.courses_in_progress:
            if course in student.grades:
                student.grades[course] += [grade]
                student.grades_list += [grade]
            else:
                student.grades[course] = [grade]
                student.grades_list = [grade]
        else:
            return 'Ошибка'

    def __str__(self):
        return (f'''Имя: {self.name}
                Фамилия: {self.surname}''')


class Lecturer(Mentor):
    teaching_ratings = {}
    ratings_list = []

    def __str__(self):
        return (f'''Имя: {self.name}
                Фамилия: {self.surname}
                Средняя оценка за лекции: {mean(self.ratings_list)}''' )

    def _avr_lector(self):
        avr_lec = mean(self.ratings_list)
        return avr_lec

    def __eq__(self, other):
        if not isinstance(other, Lecturer):
            return 'Такого преподавателя нет в списке'
        return self._avr_lector == other._avr_lector

    def __lt__(self, other):
        if not isinstance(other, Lecturer):
            return 'Такого преподавателя нет в списке'
        return self._avr_lector < other._avr_lector

    def __gt__(self, other):
        if not isinstance(other, Lecturer):
            return 'Такого преподавателя нет в списке'
        return self._avr_lector > other._avr_lector


class Student:
    def __init__(self, name, surname, gender):
        self.name = name
        self.surname = surname
        self.gender = gender
        self.finished_courses = []
        self.courses_in_progress = []
        self.grades = {}
        self.grades_list = []


    def rate_lector(self, lector, course, rating):
        if isinstance(lector, Lecturer) and course in lector.courses_attached and course in self.finished_courses and 0 <= rating <= 10:
            if course in lector.teaching_ratings:
                lector.teaching_ratings[course] += [rating]
                lector.ratings_list += [rating]
            else:
                lector.teaching_ratings[course] = [rating]
                lector.ratings_list = [rating]
        else:
            return 'Ошибка'

    def __str__(self):
        return (f'''Имя: {self.name}
        Фамилия: {self.surname}
        Средняя оценка за домашние задания: {mean(self.grades_list)} 
        Курсы в процессе изучения: {self.courses_in_progress}
        Завершенные курсы: {self.finished_courses}''')


    def _average_hw(self):
        avr_hw = mean(self.grades_list)
        return avr_hw

    def __eq__(self, other):
        if not isinstance(other, Student):
            return 'Такого студента нет в списке'
        return self._average_hw() == other._average_hw()

    def __lt__(self, other):
        if not isinstance(other, Student):
            return 'Такого студента нет в списке'
        return self._average_hw() < other._average_hw()

    def __gt__(self, other):
        if not isinstance(other, Student):
            return 'Такого студента нет в списке'
        return self._average_hw() > other._average_hw()


student1 = Student('Ivan', 'Runov', 'm')
student1.courses_in_progress += ['C++, Python']
student1.finished_courses += ['C++']

student2 = Student('Vera', 'Pavlova', 'f')
student2.courses_in_progress += ['C++, Python']
student2.finished_courses += ['C++']

reviewer1 = Reviewer('Some', 'Buddy')
reviewer1.courses_attached += ['C++']

reviewer2 = Reviewer('Boris', 'Rubby')
reviewer2.courses_attached += ['Python']

lector1 = Lecturer('Stepan', 'Po')
lector1.courses_attached += ['C++']

lector2 = Lecturer('Semen', 'Do')
lector2.courses_attached += ['Python']

reviewer2.rate_hw(student1, 'Python', 10)
reviewer2.rate_hw(student1, 'Python', 9)
reviewer2.rate_hw(student1, 'Python', 9)

students = [student1, student2]

def average_rate_hw(students, course):
    avr_rate_course = []
    for student in students:
        avr_rate_course.append(student.grades[course])
        avr_course = mean(avr_rate_course)
        result = f'Средняя оценка всех студентов по курсу: {course} - {avr_course}'
        return result

print(average_rate_hw(students, 'Python'))

lecturers = [lector1,lector2]

def average_rating_lec(lecturers, course):
    avr_rating_lec_course = []
    for lector in lecturers:
        avr_rating_lec_course.append(lector.teaching_ratings[course])
        avr_rating = mean(avr_rating_lec_course)
        result = f'Средняя оценка за лекции всех лекторов по курсу: {course} - {avr_rating}'
        return result

print(average_rating_lec(lecturers, 'Python'))

